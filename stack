-> Basic concept:
In computer science, a stack is an abstract data type that serves as a collection of elements, with two principal operations:
push, which adds an element to the collection, 
and pop, which removes the most recently added element that was not yet removed.

-> The order may be:
1. LIFO(Last In First Out): The last element inserted into the stack is removed first 
2. FILO(First In Last Out): Where the first element to be inserted into the stack is removed at the last.

-> Mainly the following three basic operations are performed in the stack:
1. Push: Adds an item in the stack. If the stack is full, then it is said to be an Overflow condition.
2. Pop: Removes an item from the stack. The items are popped in the reversed order in which they are pushed. 
    If the stack is empty, then it is said to be an Underflow condition.
3. Peek or Top: Returns top element of stack.
4. isEmpty: Returns true if stack is empty, else false.

-> Understanding Stacks- Examples:
   There are many real life examples of stack. Consider the simple example of plates stacked over one another in canteen. 
The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position
remains in the stack for the longest period of time.So, it can be simply seen to follow LIFO/FILO order.

-> Time Complexities of operations on stack:
   push(), pop(), isEmpty() and peek() all take O(1) time. We do not run any loop in any of these operations.

-> Applications of stack:
1. Balancing of symbols
2. Infix to Postfix /Prefix conversion
3. Redo-undo features at many places like editors, photoshop.
4. Forward and backward feature in web browsers
5. Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem.
6. Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solver
7. In Graph Algorithms like Topological Sorting and Strongly Connected Components.

-> Implementation:
There are two ways to implement a stack:
1. Using array
2. Using linked list

1.) Implementattion using Arrays:

/* Java program to implement basic stack 
operations */
class Stack 
{ 
    static final int MAX = 1000; 
    int top; 
    int a[] = new int[MAX]; // Maximum size of Stack 
  
    boolean isEmpty() 
    { 
        return (top <= 0); 
    } 
    void overflow() 
    { 
        top = -1; 
    } 
  
    boolean push(int x) 
    { 
        if (top >= (MAX-1)) 
        { 
            System.out.println("Stack Overflow"); 
            return false; 
        } 
        else
        { 
            a[++top] = x; 
            System.out.println(x + " pushed into stack"); 
            return true; 
        } 
    } 
  
    int pop() 
    { 
        if (top < 0) 
        { 
            System.out.println("Stack Underflow"); 
            return 0; 
        } 
        else
        { 
            int x = a[top--]; 
            return x; 
        } 
    } 
} 
  
// Driver code 
class Main 
{ 
    public static void main(String args[]) 
    { 
        Stack s = new Stack(); 
        s.push(100); 
        s.push(210); 
        s.push(350); 
        System.out.println(s.pop() + " Popped from stack"); 
    } 
} 
Pros: Easy to implement. Memory is saved as pointers are not involved.
Cons: It is not dynamic. It doesnâ€™t grow and shrink depending on needs at runtime.


2.) Implementation using LinkedLists:


// C program for linked list implementation of stack 
#include <stdio.h> 
#include <stdlib.h> 
#include <limits.h> 
  
// A structure to represent a stack 
struct StackNode 
{ 
    int data; 
    struct StackNode* next; 
}; 
  
struct StackNode* newNode(int data) 
{ 
    struct StackNode* stackNode = 
              (struct StackNode*) malloc(sizeof(struct StackNode)); 
    stackNode->data = data; 
    stackNode->next = NULL; 
    return stackNode; 
} 
  
int isEmpty(struct StackNode *root) 
{ 
    return !root; 
} 
  
void push(struct StackNode** root, int data) 
{ 
    struct StackNode* stackNode = newNode(data); 
    stackNode->next = *root; 
    *root = stackNode; 
    printf("%d pushed to stack\n", data); 
} 
  
int pop(struct StackNode** root) 
{ 
    if (isEmpty(*root)) 
        return INT_MIN; 
    struct StackNode* temp = *root; 
    *root = (*root)->next; 
    int popped = temp->data; 
    free(temp); 
  
    return popped; 
} 
  
int peek(struct StackNode* root) 
{ 
    if (isEmpty(root)) 
        return INT_MIN; 
    return root->data; 
} 
  
int main() 
{ 
    struct StackNode* root = NULL; 
  
    push(&root, 10); 
    push(&root, 20); 
    push(&root, 30); 
  
    printf("%d popped from stack\n", pop(&root)); 
  
    printf("Top element is %d\n", peek(root)); 
  
    return 0; 
} 

Pros: The linked list implementation of stack can grow and shrink according to the needs at runtime.
Cons: Requires extra memory due to involvement of pointers.

